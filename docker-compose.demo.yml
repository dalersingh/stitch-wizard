version: '3.8'

services:
  # PHP/Laravel service
  laravel:
    build:
      context: .
      dockerfile: docker/demo/Dockerfile.laravel
      target: development
    volumes:
      - ./:/package
      - demo-app:/var/www/html
      - composer-cache:/home/laravel/.composer/cache
    environment:
      APP_ENV: local
      APP_DEBUG: 'true'
      APP_KEY: base64:kZE7Mb12PQL9RTx4kYlB0KUNv3uPtSw2olAkGNMm4/c=
      APP_URL: http://localhost
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: password
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PHP_MEMORY_LIMIT: 256M
      COMPOSER_ALLOW_SUPERUSER: 1
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "php", "artisan", "--version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Web server (nginx)
  nginx:
    image: nginx:alpine
    volumes:
      - demo-app:/var/www/html
      - ./docker/demo/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8000:80"
    depends_on:
      laravel:
        condition: service_healthy
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # MySQL database
  mysql:
    image: mysql:8.0
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_USER: laravel
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3306:3306"
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "laravel", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis for caching
  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Node.js service for Playwright E2E tests
  playwright:
    build:
      context: .
      dockerfile: docker/demo/Dockerfile.playwright
    volumes:
      - ./:/package
      - ./e2e:/app/e2e
      - ./test-results:/test-results
      - playwright-cache:/home/playwright/.cache
    environment:
      PLAYWRIGHT_BASE_URL: http://nginx
      NODE_ENV: test
      CI: 'true'
      DISPLAY: :99
      PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    depends_on:
      nginx:
        condition: service_started
      laravel:
        condition: service_healthy
    networks:
      - demo-network
    command: >
      bash -c "
        echo 'Waiting for application to be ready...' &&
        wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://nginx/ -O /dev/null &&
        echo 'Running Playwright tests with screenshots...' &&
        npx playwright test --config=/package/e2e/playwright.config.js &&
        echo 'Generating test report...' &&
        npx playwright show-report --host 0.0.0.0
      "

  # Setup service to initialize the demo app
  setup:
    build:
      context: .
      dockerfile: docker/demo/Dockerfile.laravel
      target: development
    volumes:
      - ./:/package
      - demo-app:/var/www/html
      - composer-cache:/home/laravel/.composer/cache
    environment:
      APP_ENV: local
      APP_DEBUG: 'true'
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: password
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      REDIS_HOST: redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - demo-network
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    command: ["php", "artisan", "serve", "--host=0.0.0.0", "--port=8000"]
    profiles: ["setup"]

networks:
  demo-network:
    driver: bridge

volumes:
  demo-app:
    driver: local
  mysql-data:
    driver: local
  redis-data:
    driver: local
  composer-cache:
    driver: local
  playwright-cache:
    driver: local
  test-results:
    driver: local
